plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.8'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
}

group = 'org.prgms'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

jacoco {
    toolVersion = '0.8.11'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '3.2.0'
    implementation group: 'javax.validation', name: 'validation-api', version: '2.0.0.Alpha1'

    // WebSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation group: 'org.webjars', name: 'stomp-websocket', version: '2.3.3-1'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // AWS S3
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-aws', version: '2.2.1.RELEASE'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    runtimeOnly 'com.h2database:h2'
}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', 'test'
    testLogging {
        showCauses = true
        showExceptions = true
        showStackTraces = true
        exceptionFormat = 'full'
    }
    finalizedBy 'testCoverage'
}

tasks.register('testCoverage', Test) {
    group 'verification'
    description 'Runs the tests with coverage'

    dependsOn 'test', 'jacocoTestReport', 'jacocoTestCoverageVerification'
}

tasks.named('jacocoTestReport') {
    reports {
        html.required = true
        xml.required = false
        csv.required = false
    }

    mustRunAfter 'test'
}

tasks.named('jacocoTestCoverageVerification') {
    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00 // TODO: 추후 라인 커버리지 비율 설정 (0.80 ~ 0.90 권장)
            }
        }
    }

    mustRunAfter 'jacocoTestReport'
}
